{"ast":null,"code":"var _jsxFileName = \"/Users/himanshureddy/Desktop/plant_waterer_webpage/src/App.js\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DataCard from './Components/DataCard';\nimport HistoricalSensorDataChart from './Components/HistoricalSensorDataChart';\nimport MotorDataTable from './Components/MotorDataTable';\nimport { styled } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core'; // Address of my raspberry pi, running an express server on port 3000\n\nconst serverAddress = 'http://192.168.1.220:3000';\nconst Title = styled(Typography)({\n  textAlign: \"center\",\n  fontSize: \"50px\",\n  fontWeight: '550'\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\",\n      historicalSensorData: [],\n      historicalMotorData: []\n    };\n    this.updateData = this.updateData.bind(this);\n    this.getHistoricalSensorData = this.getHistoricalSensorData.bind(this);\n    this.getHistoricalMotorData = this.getHistoricalMotorData.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateData('temperature');\n    this.updateData('humidity');\n    this.updateData('moisture');\n    this.getHistoricalSensorData(5);\n    this.getHistoricalMotorData(5);\n  } // INPUT: The type of data to update, which is either 'temperature', 'humidity', or 'moisture'\n  // OUTPUT: Sets the state variables of either temperature, humidity, or moisture to the new value\n\n\n  updateData(type) {\n    fetch(serverAddress + '/' + type).then(rawData => rawData.json()).then(data => this.setState({\n      [type]: data[type]\n    }));\n  } // INPUT: The number of records to return\n  // OUTPUT: Sets the historicalSensorData state array to the new historical results\n\n\n  getHistoricalSensorData(num) {\n    fetch(serverAddress + \"/historical-sensor-data?quantity=\".concat(encodeURIComponent(num))).then(rawData => rawData.json()).then(objData => objData.data).then(arrData => arrData.map(item => JSON.parse(item)).reverse()).then(finalData => this.setState({\n      historicalSensorData: finalData\n    }));\n  } // INPUT: The number of records to return\n  // OUTPUT: Sets the historicalMotorData state array to the new historical results\n\n\n  getHistoricalMotorData(num) {\n    fetch(serverAddress + \"/historical-motor-data?quantity=\".concat(encodeURIComponent(num))).then(rawData => rawData.json()).then(objData => objData.data).then(arrData => arrData.map(item => JSON.parse(item).date).reverse()).then(finalData => this.setState({\n      historicalMotorData: finalData\n    }));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(Grid, {\n      container: true,\n      margin: \"100px\",\n      direction: \"row\",\n      justify: \"space-evenly\",\n      spacing: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Temperature',\n      value: this.state.temperature,\n      onClick: () => this.updateData('temperature'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Humidity',\n      value: this.state.humidity,\n      onClick: () => this.updateData('humidity'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Moisture',\n      value: this.state.moisture,\n      onClick: () => this.updateData('moisture'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))), React.createElement(HistoricalSensorDataChart, {\n      data: this.state.historicalSensorData,\n      onNewNum: num => this.getHistoricalSensorData(num),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(MotorDataTable, {\n      data: this.state.historicalMotorData,\n      onNewNum: num => this.getHistoricalMotorData(num),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/himanshureddy/Desktop/plant_waterer_webpage/src/App.js"],"names":["React","Grid","DataCard","HistoricalSensorDataChart","MotorDataTable","styled","Typography","serverAddress","Title","textAlign","fontSize","fontWeight","App","Component","constructor","props","state","temperature","humidity","moisture","historicalSensorData","historicalMotorData","updateData","bind","getHistoricalSensorData","getHistoricalMotorData","componentDidMount","type","fetch","then","rawData","json","data","setState","num","encodeURIComponent","objData","arrData","map","item","JSON","parse","reverse","finalData","date","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DataCard from './Components/DataCard';\nimport HistoricalSensorDataChart from './Components/HistoricalSensorDataChart';\nimport MotorDataTable from './Components/MotorDataTable';\nimport { styled } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\n\n// Address of my raspberry pi, running an express server on port 3000\nconst serverAddress = 'http://192.168.1.220:3000';\n\nconst Title = styled(Typography) ({\n  textAlign: \"center\",\n  fontSize: \"50px\",\n  fontWeight: '550',\n})\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\",\n      historicalSensorData: [],\n      historicalMotorData: []\n    }\n\n    this.updateData = this.updateData.bind(this);\n    this.getHistoricalSensorData = this.getHistoricalSensorData.bind(this);\n    this.getHistoricalMotorData = this.getHistoricalMotorData.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateData('temperature');\n    this.updateData('humidity');\n    this.updateData('moisture');\n    this.getHistoricalSensorData(5);\n    this.getHistoricalMotorData(5);\n  }\n\n  // INPUT: The type of data to update, which is either 'temperature', 'humidity', or 'moisture'\n  // OUTPUT: Sets the state variables of either temperature, humidity, or moisture to the new value\n  updateData(type) {\n    fetch(serverAddress + '/' + type)\n      .then(rawData => rawData.json())\n      .then(data => this.setState({ [type]: data[type] }));\n  }\n\n  // INPUT: The number of records to return\n  // OUTPUT: Sets the historicalSensorData state array to the new historical results\n  getHistoricalSensorData(num) {\n    fetch(serverAddress + `/historical-sensor-data?quantity=${encodeURIComponent(num)}`)\n      .then(rawData => rawData.json())\n      .then(objData => objData.data)\n      .then(arrData => arrData.map(item => JSON.parse(item)).reverse()) \n      .then(finalData => this.setState({ historicalSensorData: finalData }))\n  }\n\n  // INPUT: The number of records to return\n  // OUTPUT: Sets the historicalMotorData state array to the new historical results\n  getHistoricalMotorData(num) {\n    fetch(serverAddress + `/historical-motor-data?quantity=${encodeURIComponent(num)}`)\n      .then(rawData => rawData.json())\n      .then(objData => objData.data)\n      .then(arrData => arrData.map(item => JSON.parse(item).date).reverse())\n      .then(finalData => this.setState({ historicalMotorData: finalData}))\n      \n  }\n\n  render() {\n    return ( \n      <React.Fragment>\n\n        <Title>\n          Dashboard\n        </Title>\n\n        <Grid container margin='100px' direction=\"row\" justify=\"space-evenly\" spacing={5} >\n          <Grid item>\n            <DataCard name={'Temperature'} value={this.state.temperature} onClick={() => this.updateData('temperature')} />\n          </Grid> \n\n          <Grid item>\n            <DataCard name={'Humidity'} value={this.state.humidity} onClick={() => this.updateData('humidity')} />\n          </Grid>\n\n          <Grid item>\n            <DataCard name={'Moisture'} value={this.state.moisture} onClick={() => this.updateData('moisture')} />\n          </Grid>\n        </Grid>\n\n        <HistoricalSensorDataChart data={this.state.historicalSensorData} onNewNum={(num) => this.getHistoricalSensorData(num)} />\n\n        <MotorDataTable data={this.state.historicalMotorData} onNewNum={(num) => this.getHistoricalMotorData(num)} />\n\n      </React.Fragment>\n     );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}