{"ast":null,"code":"var _jsxFileName = \"/Users/himanshureddy/Desktop/plant_waterer/src/App.js\";\nimport React from 'react';\nimport DataCard from './Components/DataCard';\nconst serverAddress = '192.168.1.220:3000';\nconst styles = {};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\"\n    };\n    this.updateData = this.updateData.bind(this);\n  } // Accepts the type of data, which can only be 'temperature', 'humidity', or 'moisture' (the current\n  // api 'get' endpoints)\n\n\n  async getData(type) {\n    if (type === 'temperature' || type === 'humidity' || type === 'moisture') {\n      try {\n        let data = await fetch(serverAddress + '/' + type);\n        console.log('h1');\n        return data;\n      } catch (err) {\n        return err;\n      }\n    } else {\n      return 'Invalid request type';\n    }\n  }\n\n  updateData(type) {\n    fetch('http://192.168.1.220:3000/temperature').then(rawData => rawData.json()).then(data => this.setState({\n      temperature: data[type]\n    }));\n    console.log('ding');\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Temperature',\n      value: this.state.temperature,\n      onClick: () => this.updateData('temperature'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(DataCard, {\n      name: 'Humidity',\n      value: this.state.humidity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(DataCard, {\n      name: 'Moisture',\n      value: this.state.moisture,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/himanshureddy/Desktop/plant_waterer/src/App.js"],"names":["React","DataCard","serverAddress","styles","App","Component","constructor","props","state","temperature","humidity","moisture","updateData","bind","getData","type","data","fetch","console","log","err","then","rawData","json","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAIA,MAAMC,aAAa,GAAG,oBAAtB;AACA,MAAMC,MAAM,GAAG,EAAf;;AAIA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,KADF;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAMA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACD,GAV+B,CAYhC;AACA;;;AACA,QAAMC,OAAN,CAAcC,IAAd,EAAoB;AAClB,QAAIA,IAAI,KAAK,aAAT,IACAA,IAAI,KAAK,UADT,IAEAA,IAAI,KAAK,UAFb,EAEyB;AACvB,UAAI;AACF,YAAIC,IAAI,GAAG,MAAMC,KAAK,CAACf,aAAa,GAAG,GAAhB,GAAsBa,IAAvB,CAAtB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,eAAOH,IAAP;AACD,OAJD,CAIE,OAAOI,GAAP,EAAY;AACZ,eAAOA,GAAP;AACD;AACF,KAVD,MAUO;AACL,aAAO,sBAAP;AACD;AACF;;AAEDR,EAAAA,UAAU,CAACG,IAAD,EAAO;AACfE,IAAAA,KAAK,CAAC,uCAAD,CAAL,CACGI,IADH,CACQC,OAAO,IAAIA,OAAO,CAACC,IAAR,EADnB,EAEGF,IAFH,CAEQL,IAAI,IAAI,KAAKQ,QAAL,CAAc;AAAEf,MAAAA,WAAW,EAAEO,IAAI,CAACD,IAAD;AAAnB,KAAd,CAFhB;AAGAG,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;;AAGDM,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAE,aAAhB;AAA+B,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWC,WAAjD;AAA8D,MAAA,OAAO,EAAE,MAAM,KAAKG,UAAL,CAAgB,aAAhB,CAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAE,UAAhB;AAA4B,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWE,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAE,UAAhB;AAA4B,MAAA,KAAK,EAAE,KAAKF,KAAL,CAAWG,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AA9C+B;;AAkDlC,eAAeP,GAAf","sourcesContent":["import React from 'react';\nimport DataCard from './Components/DataCard';\n\n\n\nconst serverAddress = '192.168.1.220:3000';\nconst styles = {\n\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\"\n    }\n\n    this.updateData = this.updateData.bind(this);\n  }\n \n  // Accepts the type of data, which can only be 'temperature', 'humidity', or 'moisture' (the current\n  // api 'get' endpoints)\n  async getData(type) {\n    if (type === 'temperature' ||\n        type === 'humidity' ||\n        type === 'moisture') {\n      try {\n        let data = await fetch(serverAddress + '/' + type);\n        console.log('h1');\n        return data;\n      } catch (err) {\n        return err;\n      }\n    } else {\n      return 'Invalid request type';\n    }\n  }\n\n  updateData(type) {\n    fetch('http://192.168.1.220:3000/temperature')\n      .then(rawData => rawData.json())\n      .then(data => this.setState({ temperature: data[type] }));\n    console.log('ding');\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <DataCard name={'Temperature'} value={this.state.temperature} onClick={() => this.updateData('temperature')}/>\n        <DataCard name={'Humidity'} value={this.state.humidity}/>\n        <DataCard name={'Moisture'} value={this.state.moisture}/>\n      </React.Fragment>\n     );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}