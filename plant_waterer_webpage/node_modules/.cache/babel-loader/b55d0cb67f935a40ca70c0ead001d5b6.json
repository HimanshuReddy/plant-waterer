{"ast":null,"code":"var _jsxFileName = \"/Users/himanshureddy/Desktop/plant_waterer/src/App.js\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DataCard from './Components/DataCard';\nimport HistoricalSensorDataChart from './Components/HistoricalSensorDataChart';\nimport MotorDataTable from './Components/MotorDataTable';\nimport { styled } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core'; // Address of my raspberry pi, running an express server on port 3000\n\nconst serverAddress = 'http://192.168.1.220:3000';\nconst Title = styled(Typography)({\n  textAlign: \"center\",\n  fontSize: \"50px\",\n  fontWeight: '550'\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\",\n      historicalSensorData: [],\n      historicalMotorData: []\n    };\n    this.updateData = this.updateData.bind(this);\n    this.getHistoricalSensorData = this.getHistoricalSensorData.bind(this);\n    this.getHistoricalMotorData = this.getHistoricalMotorData.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateData('temperature');\n    this.updateData('humidity');\n    this.updateData('moisture');\n    this.getHistoricalSensorData(5);\n  } // Accepts the type of data, which can only be 'temperature', 'humidity', or 'moisture' (the current\n  // api 'get' endpoints)\n\n\n  async getData(type) {\n    if (type === 'temperature' || type === 'humidity' || type === 'moisture') {\n      try {\n        let rawData = await fetch(serverAddress + '/' + type);\n        let data = rawData.json();\n        return data;\n      } catch (err) {\n        return err;\n      }\n    } else {\n      return 'Invalid request type';\n    }\n  } // Accepts the type of data to update, which is either 'temperature', 'humidity', or 'moisture'\n  // Returns the new data from the sensors\n\n\n  updateData(type) {\n    fetch(serverAddress + '/' + type).then(rawData => rawData.json()).then(data => this.setState({\n      [type]: data[type]\n    }));\n  } // Gets the historical data for the sensor values\n\n\n  getHistoricalSensorData(num) {\n    fetch(serverAddress + \"/historical-sensor-data?quantity=\".concat(encodeURIComponent(num))).then(rawData => rawData.json()).then(data => this.setState({\n      historicalSensorData: data\n    }));\n  }\n\n  getHistoricalMotorData(num) {\n    fetch(serverAddress + \"/historical-motor-data?quantity=\".concat(encodeURIComponent(num))).then(rawData => rawData.json()).then(objData => objData.data).then(arrData => console.log(arrData.map(date => date.date))).then(arrData => this.setState({\n      historicalMotorData: arrData\n    }));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(Grid, {\n      container: true,\n      margin: \"100px\",\n      direction: \"row\",\n      justify: \"space-evenly\",\n      spacing: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Temperature',\n      value: this.state.temperature,\n      onClick: () => this.updateData('temperature'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Humidity',\n      value: this.state.humidity,\n      onClick: () => this.updateData('humidity'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Moisture',\n      value: this.state.moisture,\n      onClick: () => this.updateData('moisture'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }))), React.createElement(HistoricalSensorDataChart, {\n      data: this.state.historicalSensorData,\n      onNewNum: num => this.getHistoricalSensorData(num),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(MotorDataTable, {\n      data: this.state.historicalMotorData,\n      onNewNum: num => this.getHistoricalMotorData(num),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/himanshureddy/Desktop/plant_waterer/src/App.js"],"names":["React","Grid","DataCard","HistoricalSensorDataChart","MotorDataTable","styled","Typography","serverAddress","Title","textAlign","fontSize","fontWeight","App","Component","constructor","props","state","temperature","humidity","moisture","historicalSensorData","historicalMotorData","updateData","bind","getHistoricalSensorData","getHistoricalMotorData","componentDidMount","getData","type","rawData","fetch","data","json","err","then","setState","num","encodeURIComponent","objData","arrData","console","log","map","date","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DataCard from './Components/DataCard';\nimport HistoricalSensorDataChart from './Components/HistoricalSensorDataChart';\nimport MotorDataTable from './Components/MotorDataTable';\nimport { styled } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\n\n\n// Address of my raspberry pi, running an express server on port 3000\nconst serverAddress = 'http://192.168.1.220:3000';\n\nconst Title = styled(Typography) ({\n  textAlign: \"center\",\n  fontSize: \"50px\",\n  fontWeight: '550',\n})\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\",\n      historicalSensorData: [],\n      historicalMotorData: []\n    }\n\n    this.updateData = this.updateData.bind(this);\n    this.getHistoricalSensorData = this.getHistoricalSensorData.bind(this);\n    this.getHistoricalMotorData = this.getHistoricalMotorData.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateData('temperature');\n    this.updateData('humidity');\n    this.updateData('moisture');\n    this.getHistoricalSensorData(5);\n  }\n \n  // Accepts the type of data, which can only be 'temperature', 'humidity', or 'moisture' (the current\n  // api 'get' endpoints)\n  async getData(type) {\n    if (type === 'temperature' ||\n        type === 'humidity' ||\n        type === 'moisture') {\n      try {\n        let rawData = await fetch(serverAddress + '/' + type);\n        let data = rawData.json();\n        return data;\n      } catch (err) {\n        return err;\n      }\n    } else {\n      return 'Invalid request type';\n    }\n  }\n\n  // Accepts the type of data to update, which is either 'temperature', 'humidity', or 'moisture'\n  // Returns the new data from the sensors\n  updateData(type) {\n    fetch(serverAddress + '/' + type)\n      .then(rawData => rawData.json())\n      .then(data => this.setState({ [type]: data[type] }));\n  }\n\n  // Gets the historical data for the sensor values\n  getHistoricalSensorData(num) {\n    fetch(serverAddress + `/historical-sensor-data?quantity=${encodeURIComponent(num)}`)\n      .then(rawData => rawData.json())\n      .then(data => this.setState({ historicalSensorData: data}))\n  }\n\n  getHistoricalMotorData(num) {\n    fetch(serverAddress + `/historical-motor-data?quantity=${encodeURIComponent(num)}`)\n      .then(rawData => rawData.json())\n      .then(objData => objData.data)\n      .then(arrData => console.log(arrData.map(date => date.date)))\n      .then(arrData => this.setState({ historicalMotorData: arrData}))\n\n  }\n\n  render() {\n    return ( \n      <React.Fragment>\n\n        <Title>\n          Dashboard\n        </Title>\n\n        <Grid container margin='100px' direction=\"row\" justify=\"space-evenly\" spacing={5} >\n          <Grid item>\n            <DataCard name={'Temperature'} value={this.state.temperature} onClick={() => this.updateData('temperature')} />\n          </Grid> \n\n          <Grid item>\n            <DataCard name={'Humidity'} value={this.state.humidity} onClick={() => this.updateData('humidity')} />\n          </Grid>\n\n          <Grid item>\n            <DataCard name={'Moisture'} value={this.state.moisture} onClick={() => this.updateData('moisture')} />\n          </Grid>\n        </Grid>\n\n        <HistoricalSensorDataChart data={this.state.historicalSensorData} onNewNum={(num) => this.getHistoricalSensorData(num)} />\n\n        <MotorDataTable data={this.state.historicalMotorData} onNewNum={(num) => this.getHistoricalMotorData(num)} />\n\n      </React.Fragment>\n     );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}