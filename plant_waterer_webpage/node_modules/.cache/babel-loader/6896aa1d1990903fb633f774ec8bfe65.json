{"ast":null,"code":"var _jsxFileName = \"/Users/himanshureddy/Desktop/plant_waterer/src/App.js\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DataCard from './Components/DataCard'; // Address of my raspberry pi, running an express server on port 3000\n\nconst serverAddress = 'http://192.168.1.220:3000';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\"\n    };\n    this.updateData = this.updateData.bind(this);\n  } // Accepts the type of data, which can only be 'temperature', 'humidity', or 'moisture' (the current\n  // api 'get' endpoints)\n\n\n  async getData(type) {\n    if (type === 'temperature' || type === 'humidity' || type === 'moisture') {\n      try {\n        let rawData = await fetch(serverAddress + '/' + type);\n        let data = rawData.json();\n        return data;\n      } catch (err) {\n        return err;\n      }\n    } else {\n      return 'Invalid request type';\n    }\n  }\n\n  updateData(type) {\n    fetch(serverAddress + '/' + type).then(rawData => rawData.json()).then(data => this.setState({\n      [type]: data[type]\n    }));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      margin: \"40px 20px\",\n      direction: \"row\",\n      justify: \"space-evenly\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Temperature',\n      value: this.state.temperature,\n      onClick: () => this.updateData('temperature'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Humidity',\n      value: this.state.humidity,\n      onClick: () => this.updateData('humidity'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Moisture',\n      value: this.state.moisture,\n      onClick: () => this.updateData('moisture'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/himanshureddy/Desktop/plant_waterer/src/App.js"],"names":["React","Grid","DataCard","serverAddress","App","Component","constructor","props","state","temperature","humidity","moisture","updateData","bind","getData","type","rawData","fetch","data","json","err","then","setState","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DataCard from './Components/DataCard';\n\n\n// Address of my raspberry pi, running an express server on port 3000\nconst serverAddress = 'http://192.168.1.220:3000';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\"\n    }\n\n    this.updateData = this.updateData.bind(this);\n  }\n \n  // Accepts the type of data, which can only be 'temperature', 'humidity', or 'moisture' (the current\n  // api 'get' endpoints)\n  async getData(type) {\n    if (type === 'temperature' ||\n        type === 'humidity' ||\n        type === 'moisture') {\n      try {\n        let rawData = await fetch(serverAddress + '/' + type);\n        let data = rawData.json();\n        return data;\n      } catch (err) {\n        return err;\n      }\n    } else {\n      return 'Invalid request type';\n    }\n  }\n\n  updateData(type) {\n    fetch(serverAddress + '/' + type)\n      .then(rawData => rawData.json())\n      .then(data => this.setState({ [type]: data[type] }));\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <Grid container margin=\"40px 20px\" direction=\"row\" justify=\"space-evenly\">\n\n          <Grid item>\n            <DataCard name={'Temperature'} value={this.state.temperature} onClick={() => this.updateData('temperature')} />\n          </Grid> \n\n          <Grid item>\n            <DataCard name={'Humidity'} value={this.state.humidity} onClick={() => this.updateData('humidity')} />\n          </Grid>\n\n          <Grid item>\n            <DataCard name={'Moisture'} value={this.state.moisture} onClick={() => this.updateData('moisture')} />\n          </Grid>\n\n        </Grid>\n      </React.Fragment>\n     );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}