{"ast":null,"code":"var _jsxFileName = \"/Users/himanshureddy/Desktop/plant_waterer/src/App.js\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DataCard from './Components/DataCard';\nimport HistoricalSensorDataChart from './Components/HistoricalDataChart';\nimport { styled } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core'; // Address of my raspberry pi, running an express server on port 3000\n\nconst serverAddress = 'http://192.168.1.220:3000';\n\nconst generateSampleValues = num => {\n  let graphTestData = [];\n\n  for (let i = 0; i < num; i++) {\n    graphTestData.push({\n      date: new Date(i * 100000000000).toDateString(),\n      temperature: Math.floor(70 - 7 * Math.random()),\n      moisture: Math.floor(100 - 100 * Math.random()),\n      humidity: Math.floor(90 - 90 * Math.random())\n    });\n  }\n\n  return graphTestData;\n};\n\nconst Title = styled(Typography)({\n  textAlign: \"center\",\n  fontSize: \"50px\"\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\",\n      historicalData: []\n    };\n    this.updateData = this.updateData.bind(this);\n    this.getHistoricalData = this.getHistoricalData.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateData('temperature');\n    this.updateData('humidity');\n    this.updateData('moisture');\n    this.getHistoricalData();\n  } // Accepts the type of data, which can only be 'temperature', 'humidity', or 'moisture' (the current\n  // api 'get' endpoints)\n\n\n  async getData(type) {\n    if (type === 'temperature' || type === 'humidity' || type === 'moisture') {\n      try {\n        let rawData = await fetch(serverAddress + '/' + type);\n        let data = rawData.json();\n        return data;\n      } catch (err) {\n        return err;\n      }\n    } else {\n      return 'Invalid request type';\n    }\n  }\n\n  updateData(type) {\n    fetch(serverAddress + '/' + type).then(rawData => rawData.json()).then(data => this.setState({\n      [type]: data[type]\n    }));\n  } // Gets the historical data for the sensor values\n\n\n  getHistoricalSensorData(num) {\n    fetch(serverAddress + '/historical-sensor-data/?' + \"num=\".concat(encodeURIComponent(num))).then(rawData => rawData.json()).then(data => this.setState({\n      historicalData: data\n    }));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(Grid, {\n      container: true,\n      margin: \"100px\",\n      direction: \"row\",\n      justify: \"space-evenly\",\n      spacing: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Temperature',\n      value: this.state.temperature,\n      onClick: () => this.updateData('temperature'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Humidity',\n      value: this.state.humidity,\n      onClick: () => this.updateData('humidity'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(DataCard, {\n      name: 'Moisture',\n      value: this.state.moisture,\n      onClick: () => this.updateData('moisture'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }))), React.createElement(HistoricalSensorDataChart, {\n      data: this.state.historicalData,\n      onNewNum: num => this.setState({\n        historicalData: this.getHistoricalSensorData()\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/himanshureddy/Desktop/plant_waterer/src/App.js"],"names":["React","Grid","DataCard","HistoricalSensorDataChart","styled","Typography","serverAddress","generateSampleValues","num","graphTestData","i","push","date","Date","toDateString","temperature","Math","floor","random","moisture","humidity","Title","textAlign","fontSize","App","Component","constructor","props","state","historicalData","updateData","bind","getHistoricalData","componentDidMount","getData","type","rawData","fetch","data","json","err","then","setState","getHistoricalSensorData","encodeURIComponent","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DataCard from './Components/DataCard';\nimport HistoricalSensorDataChart from './Components/HistoricalDataChart';\nimport { styled } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\n\n\n// Address of my raspberry pi, running an express server on port 3000\nconst serverAddress = 'http://192.168.1.220:3000';\n\nconst generateSampleValues = (num) => {\n  let graphTestData = [];\n  for (let i = 0; i < num; i++) {\n    graphTestData.push({\n      date: (new Date(i*100000000000)).toDateString(),\n      temperature: Math.floor(70 - (7 * Math.random())),\n      moisture: Math.floor(100 - (100 * Math.random())),\n      humidity: Math.floor(90-(90*Math.random()))\n    })\n  }\n\n  return graphTestData;\n}\n\n\nconst Title = styled(Typography) ({\n  textAlign: \"center\",\n  fontSize: \"50px\",\n})\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: \"N/A\",\n      humidity: \"N/A\",\n      moisture: \"N/A\",\n      historicalData: []\n    }\n\n    this.updateData = this.updateData.bind(this);\n    this.getHistoricalData = this.getHistoricalData.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateData('temperature');\n    this.updateData('humidity');\n    this.updateData('moisture');\n    this.getHistoricalData();\n  }\n \n  // Accepts the type of data, which can only be 'temperature', 'humidity', or 'moisture' (the current\n  // api 'get' endpoints)\n  async getData(type) {\n    if (type === 'temperature' ||\n        type === 'humidity' ||\n        type === 'moisture') {\n      try {\n        let rawData = await fetch(serverAddress + '/' + type);\n        let data = rawData.json();\n        return data;\n      } catch (err) {\n        return err;\n      }\n    } else {\n      return 'Invalid request type';\n    }\n  }\n\n  updateData(type) {\n    fetch(serverAddress + '/' + type)\n      .then(rawData => rawData.json())\n      .then(data => this.setState({ [type]: data[type] }));\n  }\n\n  // Gets the historical data for the sensor values\n  getHistoricalSensorData(num) {\n    fetch(serverAddress + '/historical-sensor-data/?' + `num=${encodeURIComponent(num)}`)\n      .then(rawData => rawData.json())\n      .then(data => this.setState({ historicalData: data}))\n  }\n\n  render() {\n    return ( \n      <React.Fragment>\n\n        <Title>\n          Dashboard\n        </Title>\n\n        <Grid container margin='100px' direction=\"row\" justify=\"space-evenly\" spacing={5} >\n          <Grid item>\n            <DataCard name={'Temperature'} value={this.state.temperature} onClick={() => this.updateData('temperature')} />\n          </Grid> \n\n          <Grid item>\n            <DataCard name={'Humidity'} value={this.state.humidity} onClick={() => this.updateData('humidity')} />\n          </Grid>\n\n          <Grid item>\n            <DataCard name={'Moisture'} value={this.state.moisture} onClick={() => this.updateData('moisture')} />\n          </Grid>\n        </Grid>\n\n        <HistoricalSensorDataChart data={this.state.historicalData} onNewNum={(num) => this.setState({historicalData: this.getHistoricalSensorData()})}/>\n\n      </React.Fragment>\n     );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}